/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ConversionRateService } from "../conversionRate.service";
import { ConversionRateCreateInput } from "./ConversionRateCreateInput";
import { ConversionRate } from "./ConversionRate";
import { ConversionRateFindManyArgs } from "./ConversionRateFindManyArgs";
import { ConversionRateWhereUniqueInput } from "./ConversionRateWhereUniqueInput";
import { ConversionRateUpdateInput } from "./ConversionRateUpdateInput";

export class ConversionRateControllerBase {
  constructor(protected readonly service: ConversionRateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ConversionRate })
  async createConversionRate(
    @common.Body() data: ConversionRateCreateInput
  ): Promise<ConversionRate> {
    return await this.service.createConversionRate({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ConversionRate] })
  @ApiNestedQuery(ConversionRateFindManyArgs)
  async conversionRates(
    @common.Req() request: Request
  ): Promise<ConversionRate[]> {
    const args = plainToClass(ConversionRateFindManyArgs, request.query);
    return this.service.conversionRates({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ConversionRate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async conversionRate(
    @common.Param() params: ConversionRateWhereUniqueInput
  ): Promise<ConversionRate | null> {
    const result = await this.service.conversionRate({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ConversionRate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateConversionRate(
    @common.Param() params: ConversionRateWhereUniqueInput,
    @common.Body() data: ConversionRateUpdateInput
  ): Promise<ConversionRate | null> {
    try {
      return await this.service.updateConversionRate({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ConversionRate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteConversionRate(
    @common.Param() params: ConversionRateWhereUniqueInput
  ): Promise<ConversionRate | null> {
    try {
      return await this.service.deleteConversionRate({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
