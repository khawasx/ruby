/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ConversionRate as PrismaConversionRate } from "@prisma/client";

export class ConversionRateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConversionRateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conversionRate.count(args);
  }

  async conversionRates(
    args: Prisma.ConversionRateFindManyArgs
  ): Promise<PrismaConversionRate[]> {
    return this.prisma.conversionRate.findMany(args);
  }
  async conversionRate(
    args: Prisma.ConversionRateFindUniqueArgs
  ): Promise<PrismaConversionRate | null> {
    return this.prisma.conversionRate.findUnique(args);
  }
  async createConversionRate(
    args: Prisma.ConversionRateCreateArgs
  ): Promise<PrismaConversionRate> {
    return this.prisma.conversionRate.create(args);
  }
  async updateConversionRate(
    args: Prisma.ConversionRateUpdateArgs
  ): Promise<PrismaConversionRate> {
    return this.prisma.conversionRate.update(args);
  }
  async deleteConversionRate(
    args: Prisma.ConversionRateDeleteArgs
  ): Promise<PrismaConversionRate> {
    return this.prisma.conversionRate.delete(args);
  }
}
