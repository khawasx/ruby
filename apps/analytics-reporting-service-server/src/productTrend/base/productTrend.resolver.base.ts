/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProductTrend } from "./ProductTrend";
import { ProductTrendCountArgs } from "./ProductTrendCountArgs";
import { ProductTrendFindManyArgs } from "./ProductTrendFindManyArgs";
import { ProductTrendFindUniqueArgs } from "./ProductTrendFindUniqueArgs";
import { DeleteProductTrendArgs } from "./DeleteProductTrendArgs";
import { ProductTrendService } from "../productTrend.service";
@graphql.Resolver(() => ProductTrend)
export class ProductTrendResolverBase {
  constructor(protected readonly service: ProductTrendService) {}

  async _productTrendsMeta(
    @graphql.Args() args: ProductTrendCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductTrend])
  async productTrends(
    @graphql.Args() args: ProductTrendFindManyArgs
  ): Promise<ProductTrend[]> {
    return this.service.productTrends(args);
  }

  @graphql.Query(() => ProductTrend, { nullable: true })
  async productTrend(
    @graphql.Args() args: ProductTrendFindUniqueArgs
  ): Promise<ProductTrend | null> {
    const result = await this.service.productTrend(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductTrend)
  async deleteProductTrend(
    @graphql.Args() args: DeleteProductTrendArgs
  ): Promise<ProductTrend | null> {
    try {
      return await this.service.deleteProductTrend(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
