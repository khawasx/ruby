/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductTrendService } from "../productTrend.service";
import { ProductTrendCreateInput } from "./ProductTrendCreateInput";
import { ProductTrend } from "./ProductTrend";
import { ProductTrendFindManyArgs } from "./ProductTrendFindManyArgs";
import { ProductTrendWhereUniqueInput } from "./ProductTrendWhereUniqueInput";
import { ProductTrendUpdateInput } from "./ProductTrendUpdateInput";

export class ProductTrendControllerBase {
  constructor(protected readonly service: ProductTrendService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductTrend })
  async createProductTrend(
    @common.Body() data: ProductTrendCreateInput
  ): Promise<ProductTrend> {
    return await this.service.createProductTrend({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductTrend] })
  @ApiNestedQuery(ProductTrendFindManyArgs)
  async productTrends(@common.Req() request: Request): Promise<ProductTrend[]> {
    const args = plainToClass(ProductTrendFindManyArgs, request.query);
    return this.service.productTrends({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductTrend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async productTrend(
    @common.Param() params: ProductTrendWhereUniqueInput
  ): Promise<ProductTrend | null> {
    const result = await this.service.productTrend({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductTrend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProductTrend(
    @common.Param() params: ProductTrendWhereUniqueInput,
    @common.Body() data: ProductTrendUpdateInput
  ): Promise<ProductTrend | null> {
    try {
      return await this.service.updateProductTrend({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductTrend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProductTrend(
    @common.Param() params: ProductTrendWhereUniqueInput
  ): Promise<ProductTrend | null> {
    try {
      return await this.service.deleteProductTrend({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
