/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomerBehavior } from "./CustomerBehavior";
import { CustomerBehaviorCountArgs } from "./CustomerBehaviorCountArgs";
import { CustomerBehaviorFindManyArgs } from "./CustomerBehaviorFindManyArgs";
import { CustomerBehaviorFindUniqueArgs } from "./CustomerBehaviorFindUniqueArgs";
import { DeleteCustomerBehaviorArgs } from "./DeleteCustomerBehaviorArgs";
import { CustomerBehaviorService } from "../customerBehavior.service";
@graphql.Resolver(() => CustomerBehavior)
export class CustomerBehaviorResolverBase {
  constructor(protected readonly service: CustomerBehaviorService) {}

  async _customerBehaviorsMeta(
    @graphql.Args() args: CustomerBehaviorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomerBehavior])
  async customerBehaviors(
    @graphql.Args() args: CustomerBehaviorFindManyArgs
  ): Promise<CustomerBehavior[]> {
    return this.service.customerBehaviors(args);
  }

  @graphql.Query(() => CustomerBehavior, { nullable: true })
  async customerBehavior(
    @graphql.Args() args: CustomerBehaviorFindUniqueArgs
  ): Promise<CustomerBehavior | null> {
    const result = await this.service.customerBehavior(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomerBehavior)
  async deleteCustomerBehavior(
    @graphql.Args() args: DeleteCustomerBehaviorArgs
  ): Promise<CustomerBehavior | null> {
    try {
      return await this.service.deleteCustomerBehavior(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
