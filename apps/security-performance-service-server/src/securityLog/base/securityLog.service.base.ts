/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SecurityLog as PrismaSecurityLog } from "@prisma/client";

export class SecurityLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SecurityLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.securityLog.count(args);
  }

  async securityLogs(
    args: Prisma.SecurityLogFindManyArgs
  ): Promise<PrismaSecurityLog[]> {
    return this.prisma.securityLog.findMany(args);
  }
  async securityLog(
    args: Prisma.SecurityLogFindUniqueArgs
  ): Promise<PrismaSecurityLog | null> {
    return this.prisma.securityLog.findUnique(args);
  }
  async createSecurityLog(
    args: Prisma.SecurityLogCreateArgs
  ): Promise<PrismaSecurityLog> {
    return this.prisma.securityLog.create(args);
  }
  async updateSecurityLog(
    args: Prisma.SecurityLogUpdateArgs
  ): Promise<PrismaSecurityLog> {
    return this.prisma.securityLog.update(args);
  }
  async deleteSecurityLog(
    args: Prisma.SecurityLogDeleteArgs
  ): Promise<PrismaSecurityLog> {
    return this.prisma.securityLog.delete(args);
  }
}
