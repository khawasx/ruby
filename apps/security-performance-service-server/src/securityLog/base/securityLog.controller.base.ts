/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SecurityLogService } from "../securityLog.service";
import { SecurityLogCreateInput } from "./SecurityLogCreateInput";
import { SecurityLog } from "./SecurityLog";
import { SecurityLogFindManyArgs } from "./SecurityLogFindManyArgs";
import { SecurityLogWhereUniqueInput } from "./SecurityLogWhereUniqueInput";
import { SecurityLogUpdateInput } from "./SecurityLogUpdateInput";

export class SecurityLogControllerBase {
  constructor(protected readonly service: SecurityLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SecurityLog })
  async createSecurityLog(
    @common.Body() data: SecurityLogCreateInput
  ): Promise<SecurityLog> {
    return await this.service.createSecurityLog({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SecurityLog] })
  @ApiNestedQuery(SecurityLogFindManyArgs)
  async securityLogs(@common.Req() request: Request): Promise<SecurityLog[]> {
    const args = plainToClass(SecurityLogFindManyArgs, request.query);
    return this.service.securityLogs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SecurityLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async securityLog(
    @common.Param() params: SecurityLogWhereUniqueInput
  ): Promise<SecurityLog | null> {
    const result = await this.service.securityLog({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SecurityLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSecurityLog(
    @common.Param() params: SecurityLogWhereUniqueInput,
    @common.Body() data: SecurityLogUpdateInput
  ): Promise<SecurityLog | null> {
    try {
      return await this.service.updateSecurityLog({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SecurityLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSecurityLog(
    @common.Param() params: SecurityLogWhereUniqueInput
  ): Promise<SecurityLog | null> {
    try {
      return await this.service.deleteSecurityLog({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
