/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VulnerabilityScanService } from "../vulnerabilityScan.service";
import { VulnerabilityScanCreateInput } from "./VulnerabilityScanCreateInput";
import { VulnerabilityScan } from "./VulnerabilityScan";
import { VulnerabilityScanFindManyArgs } from "./VulnerabilityScanFindManyArgs";
import { VulnerabilityScanWhereUniqueInput } from "./VulnerabilityScanWhereUniqueInput";
import { VulnerabilityScanUpdateInput } from "./VulnerabilityScanUpdateInput";

export class VulnerabilityScanControllerBase {
  constructor(protected readonly service: VulnerabilityScanService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VulnerabilityScan })
  async createVulnerabilityScan(
    @common.Body() data: VulnerabilityScanCreateInput
  ): Promise<VulnerabilityScan> {
    return await this.service.createVulnerabilityScan({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VulnerabilityScan] })
  @ApiNestedQuery(VulnerabilityScanFindManyArgs)
  async vulnerabilityScans(
    @common.Req() request: Request
  ): Promise<VulnerabilityScan[]> {
    const args = plainToClass(VulnerabilityScanFindManyArgs, request.query);
    return this.service.vulnerabilityScans({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VulnerabilityScan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async vulnerabilityScan(
    @common.Param() params: VulnerabilityScanWhereUniqueInput
  ): Promise<VulnerabilityScan | null> {
    const result = await this.service.vulnerabilityScan({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VulnerabilityScan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVulnerabilityScan(
    @common.Param() params: VulnerabilityScanWhereUniqueInput,
    @common.Body() data: VulnerabilityScanUpdateInput
  ): Promise<VulnerabilityScan | null> {
    try {
      return await this.service.updateVulnerabilityScan({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VulnerabilityScan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVulnerabilityScan(
    @common.Param() params: VulnerabilityScanWhereUniqueInput
  ): Promise<VulnerabilityScan | null> {
    try {
      return await this.service.deleteVulnerabilityScan({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
