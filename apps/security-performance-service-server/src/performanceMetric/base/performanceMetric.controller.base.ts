/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PerformanceMetricService } from "../performanceMetric.service";
import { PerformanceMetricCreateInput } from "./PerformanceMetricCreateInput";
import { PerformanceMetric } from "./PerformanceMetric";
import { PerformanceMetricFindManyArgs } from "./PerformanceMetricFindManyArgs";
import { PerformanceMetricWhereUniqueInput } from "./PerformanceMetricWhereUniqueInput";
import { PerformanceMetricUpdateInput } from "./PerformanceMetricUpdateInput";

export class PerformanceMetricControllerBase {
  constructor(protected readonly service: PerformanceMetricService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PerformanceMetric })
  async createPerformanceMetric(
    @common.Body() data: PerformanceMetricCreateInput
  ): Promise<PerformanceMetric> {
    return await this.service.createPerformanceMetric({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PerformanceMetric] })
  @ApiNestedQuery(PerformanceMetricFindManyArgs)
  async performanceMetrics(
    @common.Req() request: Request
  ): Promise<PerformanceMetric[]> {
    const args = plainToClass(PerformanceMetricFindManyArgs, request.query);
    return this.service.performanceMetrics({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PerformanceMetric })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async performanceMetric(
    @common.Param() params: PerformanceMetricWhereUniqueInput
  ): Promise<PerformanceMetric | null> {
    const result = await this.service.performanceMetric({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PerformanceMetric })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePerformanceMetric(
    @common.Param() params: PerformanceMetricWhereUniqueInput,
    @common.Body() data: PerformanceMetricUpdateInput
  ): Promise<PerformanceMetric | null> {
    try {
      return await this.service.updatePerformanceMetric({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PerformanceMetric })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePerformanceMetric(
    @common.Param() params: PerformanceMetricWhereUniqueInput
  ): Promise<PerformanceMetric | null> {
    try {
      return await this.service.deletePerformanceMetric({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
