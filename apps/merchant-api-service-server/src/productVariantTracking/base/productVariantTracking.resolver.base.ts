/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProductVariantTracking } from "./ProductVariantTracking";
import { ProductVariantTrackingCountArgs } from "./ProductVariantTrackingCountArgs";
import { ProductVariantTrackingFindManyArgs } from "./ProductVariantTrackingFindManyArgs";
import { ProductVariantTrackingFindUniqueArgs } from "./ProductVariantTrackingFindUniqueArgs";
import { CreateProductVariantTrackingArgs } from "./CreateProductVariantTrackingArgs";
import { UpdateProductVariantTrackingArgs } from "./UpdateProductVariantTrackingArgs";
import { DeleteProductVariantTrackingArgs } from "./DeleteProductVariantTrackingArgs";
import { Customer } from "../../customer/base/Customer";
import { Merchant } from "../../merchant/base/Merchant";
import { ProductVariantTrackingService } from "../productVariantTracking.service";
@graphql.Resolver(() => ProductVariantTracking)
export class ProductVariantTrackingResolverBase {
  constructor(protected readonly service: ProductVariantTrackingService) {}

  async _productVariantTrackingsMeta(
    @graphql.Args() args: ProductVariantTrackingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductVariantTracking])
  async productVariantTrackings(
    @graphql.Args() args: ProductVariantTrackingFindManyArgs
  ): Promise<ProductVariantTracking[]> {
    return this.service.productVariantTrackings(args);
  }

  @graphql.Query(() => ProductVariantTracking, { nullable: true })
  async productVariantTracking(
    @graphql.Args() args: ProductVariantTrackingFindUniqueArgs
  ): Promise<ProductVariantTracking | null> {
    const result = await this.service.productVariantTracking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductVariantTracking)
  async createProductVariantTracking(
    @graphql.Args() args: CreateProductVariantTrackingArgs
  ): Promise<ProductVariantTracking> {
    return await this.service.createProductVariantTracking({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,

        merchant: args.data.merchant
          ? {
              connect: args.data.merchant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ProductVariantTracking)
  async updateProductVariantTracking(
    @graphql.Args() args: UpdateProductVariantTrackingArgs
  ): Promise<ProductVariantTracking | null> {
    try {
      return await this.service.updateProductVariantTracking({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,

          merchant: args.data.merchant
            ? {
                connect: args.data.merchant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductVariantTracking)
  async deleteProductVariantTracking(
    @graphql.Args() args: DeleteProductVariantTrackingArgs
  ): Promise<ProductVariantTracking | null> {
    try {
      return await this.service.deleteProductVariantTracking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  async getCustomer(
    @graphql.Parent() parent: ProductVariantTracking
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Merchant, {
    nullable: true,
    name: "merchant",
  })
  async getMerchant(
    @graphql.Parent() parent: ProductVariantTracking
  ): Promise<Merchant | null> {
    const result = await this.service.getMerchant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
