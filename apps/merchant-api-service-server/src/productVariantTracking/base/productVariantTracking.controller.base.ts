/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductVariantTrackingService } from "../productVariantTracking.service";
import { ProductVariantTrackingCreateInput } from "./ProductVariantTrackingCreateInput";
import { ProductVariantTracking } from "./ProductVariantTracking";
import { ProductVariantTrackingFindManyArgs } from "./ProductVariantTrackingFindManyArgs";
import { ProductVariantTrackingWhereUniqueInput } from "./ProductVariantTrackingWhereUniqueInput";
import { ProductVariantTrackingUpdateInput } from "./ProductVariantTrackingUpdateInput";

export class ProductVariantTrackingControllerBase {
  constructor(protected readonly service: ProductVariantTrackingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductVariantTracking })
  async createProductVariantTracking(
    @common.Body() data: ProductVariantTrackingCreateInput
  ): Promise<ProductVariantTracking> {
    return await this.service.createProductVariantTracking({
      data: {
        ...data,

        customer: data.customer
          ? {
              connect: data.customer,
            }
          : undefined,

        merchant: data.merchant
          ? {
              connect: data.merchant,
            }
          : undefined,
      },
      select: {
        color: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        customerConversionSuccessRate: true,
        customerRefusalSuccessRate: true,
        grade: true,
        id: true,

        merchant: {
          select: {
            id: true,
          },
        },

        merchantStarsAtTime: true,
        merchantSuccessRate: true,
        model: true,
        price: true,
        priceAtTime: true,
        product: true,
        size: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductVariantTracking] })
  @ApiNestedQuery(ProductVariantTrackingFindManyArgs)
  async productVariantTrackings(
    @common.Req() request: Request
  ): Promise<ProductVariantTracking[]> {
    const args = plainToClass(
      ProductVariantTrackingFindManyArgs,
      request.query
    );
    return this.service.productVariantTrackings({
      ...args,
      select: {
        color: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        customerConversionSuccessRate: true,
        customerRefusalSuccessRate: true,
        grade: true,
        id: true,

        merchant: {
          select: {
            id: true,
          },
        },

        merchantStarsAtTime: true,
        merchantSuccessRate: true,
        model: true,
        price: true,
        priceAtTime: true,
        product: true,
        size: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductVariantTracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async productVariantTracking(
    @common.Param() params: ProductVariantTrackingWhereUniqueInput
  ): Promise<ProductVariantTracking | null> {
    const result = await this.service.productVariantTracking({
      where: params,
      select: {
        color: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        customerConversionSuccessRate: true,
        customerRefusalSuccessRate: true,
        grade: true,
        id: true,

        merchant: {
          select: {
            id: true,
          },
        },

        merchantStarsAtTime: true,
        merchantSuccessRate: true,
        model: true,
        price: true,
        priceAtTime: true,
        product: true,
        size: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductVariantTracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProductVariantTracking(
    @common.Param() params: ProductVariantTrackingWhereUniqueInput,
    @common.Body() data: ProductVariantTrackingUpdateInput
  ): Promise<ProductVariantTracking | null> {
    try {
      return await this.service.updateProductVariantTracking({
        where: params,
        data: {
          ...data,

          customer: data.customer
            ? {
                connect: data.customer,
              }
            : undefined,

          merchant: data.merchant
            ? {
                connect: data.merchant,
              }
            : undefined,
        },
        select: {
          color: true,
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          customerConversionSuccessRate: true,
          customerRefusalSuccessRate: true,
          grade: true,
          id: true,

          merchant: {
            select: {
              id: true,
            },
          },

          merchantStarsAtTime: true,
          merchantSuccessRate: true,
          model: true,
          price: true,
          priceAtTime: true,
          product: true,
          size: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductVariantTracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProductVariantTracking(
    @common.Param() params: ProductVariantTrackingWhereUniqueInput
  ): Promise<ProductVariantTracking | null> {
    try {
      return await this.service.deleteProductVariantTracking({
        where: params,
        select: {
          color: true,
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          customerConversionSuccessRate: true,
          customerRefusalSuccessRate: true,
          grade: true,
          id: true,

          merchant: {
            select: {
              id: true,
            },
          },

          merchantStarsAtTime: true,
          merchantSuccessRate: true,
          model: true,
          price: true,
          priceAtTime: true,
          product: true,
          size: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
