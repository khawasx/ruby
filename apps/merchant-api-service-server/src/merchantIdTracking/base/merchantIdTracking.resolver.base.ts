/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MerchantIdTracking } from "./MerchantIdTracking";
import { MerchantIdTrackingCountArgs } from "./MerchantIdTrackingCountArgs";
import { MerchantIdTrackingFindManyArgs } from "./MerchantIdTrackingFindManyArgs";
import { MerchantIdTrackingFindUniqueArgs } from "./MerchantIdTrackingFindUniqueArgs";
import { CreateMerchantIdTrackingArgs } from "./CreateMerchantIdTrackingArgs";
import { UpdateMerchantIdTrackingArgs } from "./UpdateMerchantIdTrackingArgs";
import { DeleteMerchantIdTrackingArgs } from "./DeleteMerchantIdTrackingArgs";
import { Merchant } from "../../merchant/base/Merchant";
import { MerchantIdTrackingService } from "../merchantIdTracking.service";
@graphql.Resolver(() => MerchantIdTracking)
export class MerchantIdTrackingResolverBase {
  constructor(protected readonly service: MerchantIdTrackingService) {}

  async _merchantIdTrackingsMeta(
    @graphql.Args() args: MerchantIdTrackingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MerchantIdTracking])
  async merchantIdTrackings(
    @graphql.Args() args: MerchantIdTrackingFindManyArgs
  ): Promise<MerchantIdTracking[]> {
    return this.service.merchantIdTrackings(args);
  }

  @graphql.Query(() => MerchantIdTracking, { nullable: true })
  async merchantIdTracking(
    @graphql.Args() args: MerchantIdTrackingFindUniqueArgs
  ): Promise<MerchantIdTracking | null> {
    const result = await this.service.merchantIdTracking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MerchantIdTracking)
  async createMerchantIdTracking(
    @graphql.Args() args: CreateMerchantIdTrackingArgs
  ): Promise<MerchantIdTracking> {
    return await this.service.createMerchantIdTracking({
      ...args,
      data: {
        ...args.data,

        merchant: args.data.merchant
          ? {
              connect: args.data.merchant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => MerchantIdTracking)
  async updateMerchantIdTracking(
    @graphql.Args() args: UpdateMerchantIdTrackingArgs
  ): Promise<MerchantIdTracking | null> {
    try {
      return await this.service.updateMerchantIdTracking({
        ...args,
        data: {
          ...args.data,

          merchant: args.data.merchant
            ? {
                connect: args.data.merchant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MerchantIdTracking)
  async deleteMerchantIdTracking(
    @graphql.Args() args: DeleteMerchantIdTrackingArgs
  ): Promise<MerchantIdTracking | null> {
    try {
      return await this.service.deleteMerchantIdTracking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Merchant, {
    nullable: true,
    name: "merchant",
  })
  async getMerchant(
    @graphql.Parent() parent: MerchantIdTracking
  ): Promise<Merchant | null> {
    const result = await this.service.getMerchant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
