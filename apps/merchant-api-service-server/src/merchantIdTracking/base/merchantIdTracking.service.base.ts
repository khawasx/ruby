/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MerchantIdTracking as PrismaMerchantIdTracking,
  Merchant as PrismaMerchant,
} from "@prisma/client";

export class MerchantIdTrackingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MerchantIdTrackingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.merchantIdTracking.count(args);
  }

  async merchantIdTrackings(
    args: Prisma.MerchantIdTrackingFindManyArgs
  ): Promise<PrismaMerchantIdTracking[]> {
    return this.prisma.merchantIdTracking.findMany(args);
  }
  async merchantIdTracking(
    args: Prisma.MerchantIdTrackingFindUniqueArgs
  ): Promise<PrismaMerchantIdTracking | null> {
    return this.prisma.merchantIdTracking.findUnique(args);
  }
  async createMerchantIdTracking(
    args: Prisma.MerchantIdTrackingCreateArgs
  ): Promise<PrismaMerchantIdTracking> {
    return this.prisma.merchantIdTracking.create(args);
  }
  async updateMerchantIdTracking(
    args: Prisma.MerchantIdTrackingUpdateArgs
  ): Promise<PrismaMerchantIdTracking> {
    return this.prisma.merchantIdTracking.update(args);
  }
  async deleteMerchantIdTracking(
    args: Prisma.MerchantIdTrackingDeleteArgs
  ): Promise<PrismaMerchantIdTracking> {
    return this.prisma.merchantIdTracking.delete(args);
  }

  async getMerchant(parentId: string): Promise<PrismaMerchant | null> {
    return this.prisma.merchantIdTracking
      .findUnique({
        where: { id: parentId },
      })
      .merchant();
  }
}
