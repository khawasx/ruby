/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MerchantIdTrackingService } from "../merchantIdTracking.service";
import { MerchantIdTrackingCreateInput } from "./MerchantIdTrackingCreateInput";
import { MerchantIdTracking } from "./MerchantIdTracking";
import { MerchantIdTrackingFindManyArgs } from "./MerchantIdTrackingFindManyArgs";
import { MerchantIdTrackingWhereUniqueInput } from "./MerchantIdTrackingWhereUniqueInput";
import { MerchantIdTrackingUpdateInput } from "./MerchantIdTrackingUpdateInput";

export class MerchantIdTrackingControllerBase {
  constructor(protected readonly service: MerchantIdTrackingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MerchantIdTracking })
  async createMerchantIdTracking(
    @common.Body() data: MerchantIdTrackingCreateInput
  ): Promise<MerchantIdTracking> {
    return await this.service.createMerchantIdTracking({
      data: {
        ...data,

        merchant: data.merchant
          ? {
              connect: data.merchant,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        expectedArrivals: true,
        id: true,

        merchant: {
          select: {
            id: true,
          },
        },

        noShowPurchases: true,
        product: true,
        refusedPurchases: true,
        successfulPurchases: true,
        totalPurchases: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MerchantIdTracking] })
  @ApiNestedQuery(MerchantIdTrackingFindManyArgs)
  async merchantIdTrackings(
    @common.Req() request: Request
  ): Promise<MerchantIdTracking[]> {
    const args = plainToClass(MerchantIdTrackingFindManyArgs, request.query);
    return this.service.merchantIdTrackings({
      ...args,
      select: {
        createdAt: true,
        expectedArrivals: true,
        id: true,

        merchant: {
          select: {
            id: true,
          },
        },

        noShowPurchases: true,
        product: true,
        refusedPurchases: true,
        successfulPurchases: true,
        totalPurchases: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MerchantIdTracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async merchantIdTracking(
    @common.Param() params: MerchantIdTrackingWhereUniqueInput
  ): Promise<MerchantIdTracking | null> {
    const result = await this.service.merchantIdTracking({
      where: params,
      select: {
        createdAt: true,
        expectedArrivals: true,
        id: true,

        merchant: {
          select: {
            id: true,
          },
        },

        noShowPurchases: true,
        product: true,
        refusedPurchases: true,
        successfulPurchases: true,
        totalPurchases: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MerchantIdTracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMerchantIdTracking(
    @common.Param() params: MerchantIdTrackingWhereUniqueInput,
    @common.Body() data: MerchantIdTrackingUpdateInput
  ): Promise<MerchantIdTracking | null> {
    try {
      return await this.service.updateMerchantIdTracking({
        where: params,
        data: {
          ...data,

          merchant: data.merchant
            ? {
                connect: data.merchant,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          expectedArrivals: true,
          id: true,

          merchant: {
            select: {
              id: true,
            },
          },

          noShowPurchases: true,
          product: true,
          refusedPurchases: true,
          successfulPurchases: true,
          totalPurchases: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MerchantIdTracking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMerchantIdTracking(
    @common.Param() params: MerchantIdTrackingWhereUniqueInput
  ): Promise<MerchantIdTracking | null> {
    try {
      return await this.service.deleteMerchantIdTracking({
        where: params,
        select: {
          createdAt: true,
          expectedArrivals: true,
          id: true,

          merchant: {
            select: {
              id: true,
            },
          },

          noShowPurchases: true,
          product: true,
          refusedPurchases: true,
          successfulPurchases: true,
          totalPurchases: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
