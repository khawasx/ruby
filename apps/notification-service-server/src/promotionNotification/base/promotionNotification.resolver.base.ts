/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PromotionNotification } from "./PromotionNotification";
import { PromotionNotificationCountArgs } from "./PromotionNotificationCountArgs";
import { PromotionNotificationFindManyArgs } from "./PromotionNotificationFindManyArgs";
import { PromotionNotificationFindUniqueArgs } from "./PromotionNotificationFindUniqueArgs";
import { DeletePromotionNotificationArgs } from "./DeletePromotionNotificationArgs";
import { PromotionNotificationService } from "../promotionNotification.service";
@graphql.Resolver(() => PromotionNotification)
export class PromotionNotificationResolverBase {
  constructor(protected readonly service: PromotionNotificationService) {}

  async _promotionNotificationsMeta(
    @graphql.Args() args: PromotionNotificationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PromotionNotification])
  async promotionNotifications(
    @graphql.Args() args: PromotionNotificationFindManyArgs
  ): Promise<PromotionNotification[]> {
    return this.service.promotionNotifications(args);
  }

  @graphql.Query(() => PromotionNotification, { nullable: true })
  async promotionNotification(
    @graphql.Args() args: PromotionNotificationFindUniqueArgs
  ): Promise<PromotionNotification | null> {
    const result = await this.service.promotionNotification(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PromotionNotification)
  async deletePromotionNotification(
    @graphql.Args() args: DeletePromotionNotificationArgs
  ): Promise<PromotionNotification | null> {
    try {
      return await this.service.deletePromotionNotification(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
