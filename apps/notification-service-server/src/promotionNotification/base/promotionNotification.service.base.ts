/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PromotionNotification as PrismaPromotionNotification,
} from "@prisma/client";

export class PromotionNotificationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PromotionNotificationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.promotionNotification.count(args);
  }

  async promotionNotifications(
    args: Prisma.PromotionNotificationFindManyArgs
  ): Promise<PrismaPromotionNotification[]> {
    return this.prisma.promotionNotification.findMany(args);
  }
  async promotionNotification(
    args: Prisma.PromotionNotificationFindUniqueArgs
  ): Promise<PrismaPromotionNotification | null> {
    return this.prisma.promotionNotification.findUnique(args);
  }
  async createPromotionNotification(
    args: Prisma.PromotionNotificationCreateArgs
  ): Promise<PrismaPromotionNotification> {
    return this.prisma.promotionNotification.create(args);
  }
  async updatePromotionNotification(
    args: Prisma.PromotionNotificationUpdateArgs
  ): Promise<PrismaPromotionNotification> {
    return this.prisma.promotionNotification.update(args);
  }
  async deletePromotionNotification(
    args: Prisma.PromotionNotificationDeleteArgs
  ): Promise<PrismaPromotionNotification> {
    return this.prisma.promotionNotification.delete(args);
  }
}
