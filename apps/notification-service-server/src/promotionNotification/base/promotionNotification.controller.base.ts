/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PromotionNotificationService } from "../promotionNotification.service";
import { PromotionNotificationCreateInput } from "./PromotionNotificationCreateInput";
import { PromotionNotification } from "./PromotionNotification";
import { PromotionNotificationFindManyArgs } from "./PromotionNotificationFindManyArgs";
import { PromotionNotificationWhereUniqueInput } from "./PromotionNotificationWhereUniqueInput";
import { PromotionNotificationUpdateInput } from "./PromotionNotificationUpdateInput";

export class PromotionNotificationControllerBase {
  constructor(protected readonly service: PromotionNotificationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PromotionNotification })
  async createPromotionNotification(
    @common.Body() data: PromotionNotificationCreateInput
  ): Promise<PromotionNotification> {
    return await this.service.createPromotionNotification({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PromotionNotification] })
  @ApiNestedQuery(PromotionNotificationFindManyArgs)
  async promotionNotifications(
    @common.Req() request: Request
  ): Promise<PromotionNotification[]> {
    const args = plainToClass(PromotionNotificationFindManyArgs, request.query);
    return this.service.promotionNotifications({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PromotionNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async promotionNotification(
    @common.Param() params: PromotionNotificationWhereUniqueInput
  ): Promise<PromotionNotification | null> {
    const result = await this.service.promotionNotification({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PromotionNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePromotionNotification(
    @common.Param() params: PromotionNotificationWhereUniqueInput,
    @common.Body() data: PromotionNotificationUpdateInput
  ): Promise<PromotionNotification | null> {
    try {
      return await this.service.updatePromotionNotification({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PromotionNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePromotionNotification(
    @common.Param() params: PromotionNotificationWhereUniqueInput
  ): Promise<PromotionNotification | null> {
    try {
      return await this.service.deletePromotionNotification({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
