/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  OrderNotification as PrismaOrderNotification,
} from "@prisma/client";

export class OrderNotificationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OrderNotificationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.orderNotification.count(args);
  }

  async orderNotifications(
    args: Prisma.OrderNotificationFindManyArgs
  ): Promise<PrismaOrderNotification[]> {
    return this.prisma.orderNotification.findMany(args);
  }
  async orderNotification(
    args: Prisma.OrderNotificationFindUniqueArgs
  ): Promise<PrismaOrderNotification | null> {
    return this.prisma.orderNotification.findUnique(args);
  }
  async createOrderNotification(
    args: Prisma.OrderNotificationCreateArgs
  ): Promise<PrismaOrderNotification> {
    return this.prisma.orderNotification.create(args);
  }
  async updateOrderNotification(
    args: Prisma.OrderNotificationUpdateArgs
  ): Promise<PrismaOrderNotification> {
    return this.prisma.orderNotification.update(args);
  }
  async deleteOrderNotification(
    args: Prisma.OrderNotificationDeleteArgs
  ): Promise<PrismaOrderNotification> {
    return this.prisma.orderNotification.delete(args);
  }
}
