/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrderNotificationService } from "../orderNotification.service";
import { OrderNotificationCreateInput } from "./OrderNotificationCreateInput";
import { OrderNotification } from "./OrderNotification";
import { OrderNotificationFindManyArgs } from "./OrderNotificationFindManyArgs";
import { OrderNotificationWhereUniqueInput } from "./OrderNotificationWhereUniqueInput";
import { OrderNotificationUpdateInput } from "./OrderNotificationUpdateInput";

export class OrderNotificationControllerBase {
  constructor(protected readonly service: OrderNotificationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OrderNotification })
  async createOrderNotification(
    @common.Body() data: OrderNotificationCreateInput
  ): Promise<OrderNotification> {
    return await this.service.createOrderNotification({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OrderNotification] })
  @ApiNestedQuery(OrderNotificationFindManyArgs)
  async orderNotifications(
    @common.Req() request: Request
  ): Promise<OrderNotification[]> {
    const args = plainToClass(OrderNotificationFindManyArgs, request.query);
    return this.service.orderNotifications({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OrderNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async orderNotification(
    @common.Param() params: OrderNotificationWhereUniqueInput
  ): Promise<OrderNotification | null> {
    const result = await this.service.orderNotification({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OrderNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOrderNotification(
    @common.Param() params: OrderNotificationWhereUniqueInput,
    @common.Body() data: OrderNotificationUpdateInput
  ): Promise<OrderNotification | null> {
    try {
      return await this.service.updateOrderNotification({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OrderNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOrderNotification(
    @common.Param() params: OrderNotificationWhereUniqueInput
  ): Promise<OrderNotification | null> {
    try {
      return await this.service.deleteOrderNotification({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
