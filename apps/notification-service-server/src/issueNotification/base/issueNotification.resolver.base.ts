/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { IssueNotification } from "./IssueNotification";
import { IssueNotificationCountArgs } from "./IssueNotificationCountArgs";
import { IssueNotificationFindManyArgs } from "./IssueNotificationFindManyArgs";
import { IssueNotificationFindUniqueArgs } from "./IssueNotificationFindUniqueArgs";
import { DeleteIssueNotificationArgs } from "./DeleteIssueNotificationArgs";
import { IssueNotificationService } from "../issueNotification.service";
@graphql.Resolver(() => IssueNotification)
export class IssueNotificationResolverBase {
  constructor(protected readonly service: IssueNotificationService) {}

  async _issueNotificationsMeta(
    @graphql.Args() args: IssueNotificationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [IssueNotification])
  async issueNotifications(
    @graphql.Args() args: IssueNotificationFindManyArgs
  ): Promise<IssueNotification[]> {
    return this.service.issueNotifications(args);
  }

  @graphql.Query(() => IssueNotification, { nullable: true })
  async issueNotification(
    @graphql.Args() args: IssueNotificationFindUniqueArgs
  ): Promise<IssueNotification | null> {
    const result = await this.service.issueNotification(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => IssueNotification)
  async deleteIssueNotification(
    @graphql.Args() args: DeleteIssueNotificationArgs
  ): Promise<IssueNotification | null> {
    try {
      return await this.service.deleteIssueNotification(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
