/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  IssueNotification as PrismaIssueNotification,
} from "@prisma/client";

export class IssueNotificationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.IssueNotificationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.issueNotification.count(args);
  }

  async issueNotifications(
    args: Prisma.IssueNotificationFindManyArgs
  ): Promise<PrismaIssueNotification[]> {
    return this.prisma.issueNotification.findMany(args);
  }
  async issueNotification(
    args: Prisma.IssueNotificationFindUniqueArgs
  ): Promise<PrismaIssueNotification | null> {
    return this.prisma.issueNotification.findUnique(args);
  }
  async createIssueNotification(
    args: Prisma.IssueNotificationCreateArgs
  ): Promise<PrismaIssueNotification> {
    return this.prisma.issueNotification.create(args);
  }
  async updateIssueNotification(
    args: Prisma.IssueNotificationUpdateArgs
  ): Promise<PrismaIssueNotification> {
    return this.prisma.issueNotification.update(args);
  }
  async deleteIssueNotification(
    args: Prisma.IssueNotificationDeleteArgs
  ): Promise<PrismaIssueNotification> {
    return this.prisma.issueNotification.delete(args);
  }
}
