/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IssueNotificationService } from "../issueNotification.service";
import { IssueNotificationCreateInput } from "./IssueNotificationCreateInput";
import { IssueNotification } from "./IssueNotification";
import { IssueNotificationFindManyArgs } from "./IssueNotificationFindManyArgs";
import { IssueNotificationWhereUniqueInput } from "./IssueNotificationWhereUniqueInput";
import { IssueNotificationUpdateInput } from "./IssueNotificationUpdateInput";

export class IssueNotificationControllerBase {
  constructor(protected readonly service: IssueNotificationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: IssueNotification })
  async createIssueNotification(
    @common.Body() data: IssueNotificationCreateInput
  ): Promise<IssueNotification> {
    return await this.service.createIssueNotification({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [IssueNotification] })
  @ApiNestedQuery(IssueNotificationFindManyArgs)
  async issueNotifications(
    @common.Req() request: Request
  ): Promise<IssueNotification[]> {
    const args = plainToClass(IssueNotificationFindManyArgs, request.query);
    return this.service.issueNotifications({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: IssueNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async issueNotification(
    @common.Param() params: IssueNotificationWhereUniqueInput
  ): Promise<IssueNotification | null> {
    const result = await this.service.issueNotification({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: IssueNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIssueNotification(
    @common.Param() params: IssueNotificationWhereUniqueInput,
    @common.Body() data: IssueNotificationUpdateInput
  ): Promise<IssueNotification | null> {
    try {
      return await this.service.updateIssueNotification({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: IssueNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIssueNotification(
    @common.Param() params: IssueNotificationWhereUniqueInput
  ): Promise<IssueNotification | null> {
    try {
      return await this.service.deleteIssueNotification({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
