/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PostageService } from "../postage.service";
import { PostageCreateInput } from "./PostageCreateInput";
import { Postage } from "./Postage";
import { PostageFindManyArgs } from "./PostageFindManyArgs";
import { PostageWhereUniqueInput } from "./PostageWhereUniqueInput";
import { PostageUpdateInput } from "./PostageUpdateInput";

export class PostageControllerBase {
  constructor(protected readonly service: PostageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Postage })
  async createPostage(
    @common.Body() data: PostageCreateInput
  ): Promise<Postage> {
    return await this.service.createPostage({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Postage] })
  @ApiNestedQuery(PostageFindManyArgs)
  async postages(@common.Req() request: Request): Promise<Postage[]> {
    const args = plainToClass(PostageFindManyArgs, request.query);
    return this.service.postages({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Postage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async postage(
    @common.Param() params: PostageWhereUniqueInput
  ): Promise<Postage | null> {
    const result = await this.service.postage({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Postage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePostage(
    @common.Param() params: PostageWhereUniqueInput,
    @common.Body() data: PostageUpdateInput
  ): Promise<Postage | null> {
    try {
      return await this.service.updatePostage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Postage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePostage(
    @common.Param() params: PostageWhereUniqueInput
  ): Promise<Postage | null> {
    try {
      return await this.service.deletePostage({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
