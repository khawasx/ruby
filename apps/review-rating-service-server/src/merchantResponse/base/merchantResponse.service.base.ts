/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MerchantResponse as PrismaMerchantResponse,
} from "@prisma/client";

export class MerchantResponseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MerchantResponseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.merchantResponse.count(args);
  }

  async merchantResponses(
    args: Prisma.MerchantResponseFindManyArgs
  ): Promise<PrismaMerchantResponse[]> {
    return this.prisma.merchantResponse.findMany(args);
  }
  async merchantResponse(
    args: Prisma.MerchantResponseFindUniqueArgs
  ): Promise<PrismaMerchantResponse | null> {
    return this.prisma.merchantResponse.findUnique(args);
  }
  async createMerchantResponse(
    args: Prisma.MerchantResponseCreateArgs
  ): Promise<PrismaMerchantResponse> {
    return this.prisma.merchantResponse.create(args);
  }
  async updateMerchantResponse(
    args: Prisma.MerchantResponseUpdateArgs
  ): Promise<PrismaMerchantResponse> {
    return this.prisma.merchantResponse.update(args);
  }
  async deleteMerchantResponse(
    args: Prisma.MerchantResponseDeleteArgs
  ): Promise<PrismaMerchantResponse> {
    return this.prisma.merchantResponse.delete(args);
  }
}
