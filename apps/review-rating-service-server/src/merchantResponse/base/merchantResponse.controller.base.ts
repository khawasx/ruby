/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MerchantResponseService } from "../merchantResponse.service";
import { MerchantResponseCreateInput } from "./MerchantResponseCreateInput";
import { MerchantResponse } from "./MerchantResponse";
import { MerchantResponseFindManyArgs } from "./MerchantResponseFindManyArgs";
import { MerchantResponseWhereUniqueInput } from "./MerchantResponseWhereUniqueInput";
import { MerchantResponseUpdateInput } from "./MerchantResponseUpdateInput";

export class MerchantResponseControllerBase {
  constructor(protected readonly service: MerchantResponseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MerchantResponse })
  @swagger.ApiBody({
    type: MerchantResponseCreateInput,
  })
  async createMerchantResponse(
    @common.Body() data: MerchantResponseCreateInput
  ): Promise<MerchantResponse> {
    return await this.service.createMerchantResponse({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MerchantResponse] })
  @ApiNestedQuery(MerchantResponseFindManyArgs)
  async merchantResponses(
    @common.Req() request: Request
  ): Promise<MerchantResponse[]> {
    const args = plainToClass(MerchantResponseFindManyArgs, request.query);
    return this.service.merchantResponses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MerchantResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async merchantResponse(
    @common.Param() params: MerchantResponseWhereUniqueInput
  ): Promise<MerchantResponse | null> {
    const result = await this.service.merchantResponse({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MerchantResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: MerchantResponseUpdateInput,
  })
  async updateMerchantResponse(
    @common.Param() params: MerchantResponseWhereUniqueInput,
    @common.Body() data: MerchantResponseUpdateInput
  ): Promise<MerchantResponse | null> {
    try {
      return await this.service.updateMerchantResponse({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MerchantResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMerchantResponse(
    @common.Param() params: MerchantResponseWhereUniqueInput
  ): Promise<MerchantResponse | null> {
    try {
      return await this.service.deleteMerchantResponse({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
