/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MerchantResponse } from "./MerchantResponse";
import { MerchantResponseCountArgs } from "./MerchantResponseCountArgs";
import { MerchantResponseFindManyArgs } from "./MerchantResponseFindManyArgs";
import { MerchantResponseFindUniqueArgs } from "./MerchantResponseFindUniqueArgs";
import { DeleteMerchantResponseArgs } from "./DeleteMerchantResponseArgs";
import { MerchantResponseService } from "../merchantResponse.service";
@graphql.Resolver(() => MerchantResponse)
export class MerchantResponseResolverBase {
  constructor(protected readonly service: MerchantResponseService) {}

  async _merchantResponsesMeta(
    @graphql.Args() args: MerchantResponseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MerchantResponse])
  async merchantResponses(
    @graphql.Args() args: MerchantResponseFindManyArgs
  ): Promise<MerchantResponse[]> {
    return this.service.merchantResponses(args);
  }

  @graphql.Query(() => MerchantResponse, { nullable: true })
  async merchantResponse(
    @graphql.Args() args: MerchantResponseFindUniqueArgs
  ): Promise<MerchantResponse | null> {
    const result = await this.service.merchantResponse(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MerchantResponse)
  async deleteMerchantResponse(
    @graphql.Args() args: DeleteMerchantResponseArgs
  ): Promise<MerchantResponse | null> {
    try {
      return await this.service.deleteMerchantResponse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
