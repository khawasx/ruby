/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RatingService } from "../rating.service";
import { RatingCreateInput } from "./RatingCreateInput";
import { Rating } from "./Rating";
import { RatingFindManyArgs } from "./RatingFindManyArgs";
import { RatingWhereUniqueInput } from "./RatingWhereUniqueInput";
import { RatingUpdateInput } from "./RatingUpdateInput";
import { ProductReviewFindManyArgs } from "../../productReview/base/ProductReviewFindManyArgs";
import { ProductReview } from "../../productReview/base/ProductReview";
import { ProductReviewWhereUniqueInput } from "../../productReview/base/ProductReviewWhereUniqueInput";

export class RatingControllerBase {
  constructor(protected readonly service: RatingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Rating })
  @swagger.ApiBody({
    type: RatingCreateInput,
  })
  async createRating(@common.Body() data: RatingCreateInput): Promise<Rating> {
    return await this.service.createRating({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Rating] })
  @ApiNestedQuery(RatingFindManyArgs)
  async ratings(@common.Req() request: Request): Promise<Rating[]> {
    const args = plainToClass(RatingFindManyArgs, request.query);
    return this.service.ratings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Rating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rating(
    @common.Param() params: RatingWhereUniqueInput
  ): Promise<Rating | null> {
    const result = await this.service.rating({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Rating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: RatingUpdateInput,
  })
  async updateRating(
    @common.Param() params: RatingWhereUniqueInput,
    @common.Body() data: RatingUpdateInput
  ): Promise<Rating | null> {
    try {
      return await this.service.updateRating({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Rating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRating(
    @common.Param() params: RatingWhereUniqueInput
  ): Promise<Rating | null> {
    try {
      return await this.service.deleteRating({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/productReviews")
  @ApiNestedQuery(ProductReviewFindManyArgs)
  async findProductReviews(
    @common.Req() request: Request,
    @common.Param() params: RatingWhereUniqueInput
  ): Promise<ProductReview[]> {
    const query = plainToClass(ProductReviewFindManyArgs, request.query);
    const results = await this.service.findProductReviews(params.id, {
      ...query,
      select: {
        comment: true,
        createdAt: true,
        customer: true,
        id: true,
        product: true,

        rating: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productReviews")
  async connectProductReviews(
    @common.Param() params: RatingWhereUniqueInput,
    @common.Body() body: ProductReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productReviews: {
        connect: body,
      },
    };
    await this.service.updateRating({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productReviews")
  async updateProductReviews(
    @common.Param() params: RatingWhereUniqueInput,
    @common.Body() body: ProductReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productReviews: {
        set: body,
      },
    };
    await this.service.updateRating({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productReviews")
  async disconnectProductReviews(
    @common.Param() params: RatingWhereUniqueInput,
    @common.Body() body: ProductReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productReviews: {
        disconnect: body,
      },
    };
    await this.service.updateRating({
      where: params,
      data,
      select: { id: true },
    });
  }
}
